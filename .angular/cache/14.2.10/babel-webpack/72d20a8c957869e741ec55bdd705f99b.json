{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { ConfirmDialogComponent } from './../../shared/confirm-dialog/confirm-dialog.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/services/task.service\";\nimport * as i2 from \"ngx-cookie-service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/flex-layout/flex\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/icon\";\nimport * as i9 from \"@angular/material/form-field\";\nimport * as i10 from \"@angular/material/card\";\nimport * as i11 from \"@angular/material/input\";\nimport * as i12 from \"@angular/cdk/drag-drop\";\n\nfunction HomeComponent_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Task is a required field. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction HomeComponent_mat_error_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" The task field must be at least 3 characters in length. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction HomeComponent_mat_error_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" The task field cannot exceed 35 characters in length. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction HomeComponent_div_30_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"mat-card\", 18)(2, \"mat-card-content\")(3, \"div\", 19)(4, \"div\", 1);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 20)(7, \"button\", 21);\n    i0.ɵɵlistener(\"click\", function HomeComponent_div_30_Template_button_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const item_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.deleteTask(item_r7._id));\n    });\n    i0.ɵɵelementStart(8, \"mat-icon\", 22);\n    i0.ɵɵtext(9, \"delete\");\n    i0.ɵɵelementEnd()()()()()()();\n  }\n\n  if (rf & 2) {\n    const item_r7 = ctx.$implicit;\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", item_r7.text, \" \");\n  }\n}\n\nfunction HomeComponent_div_38_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"mat-card\", 18)(2, \"div\", 19)(3, \"div\", 1);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 20)(6, \"button\", 21);\n    i0.ɵɵlistener(\"click\", function HomeComponent_div_38_Template_button_click_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const item_r10 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.deleteTask(item_r10._id));\n    });\n    i0.ɵɵelementStart(7, \"mat-icon\", 22);\n    i0.ɵɵtext(8, \"delete\");\n    i0.ɵɵelementEnd()()()()()();\n  }\n\n  if (rf & 2) {\n    const item_r10 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", item_r10.text, \" \");\n  }\n}\n\nconst _c0 = function (a0) {\n  return [a0];\n};\n\nexport let HomeComponent = /*#__PURE__*/(() => {\n  class HomeComponent {\n    //Functionality of task form\n    constructor(taskService, cookieService, fb, dialog) {\n      this.taskService = taskService;\n      this.cookieService = cookieService;\n      this.fb = fb;\n      this.dialog = dialog; //Initialize form\n\n      this.taskForm = this.fb.group({\n        task: [null, Validators.compose([Validators.minLength(3), Validators.maxLength(35)])]\n      });\n      this.employee = {};\n      this.dialogData = {};\n      this.todo = [];\n      this.done = [];\n      this.empId = parseInt(this.cookieService.get('session_user'), 10); //Call all tasks with promise.\n\n      this.taskService.findAllTasks(this.empId).subscribe({\n        next: res => {\n          this.employee = res;\n          console.log('--Response from the findAllTasks service call.--');\n          console.log(this.employee);\n        },\n        error: e => {\n          console.log(e.message);\n        },\n        complete: () => {\n          this.todo = this.employee.todo;\n          this.done = this.employee.done;\n          console.log('onComplete method from the home.component.ts file, findAllTasks() service call');\n          console.log(this.todo);\n          console.log(this.done);\n        }\n      });\n    } //createTask function\n\n\n    createTask() {\n      const newTask = this.taskForm.controls['task'].value;\n      this.taskService.createTask(this.empId, newTask).subscribe({\n        next: res => {\n          this.employee = res;\n          console.log('--This is the response from the createTask call.');\n          console.log(res);\n        },\n        error: e => {\n          console.log(e.message);\n        },\n        complete: () => {\n          this.todo = this.employee.todo;\n          this.done = this.employee.done;\n          console.log('--onComplete method from the home.component.ts file, createTask() service call.');\n          console.log(this.todo);\n          console.log(this.done);\n          this.taskForm.controls['task'].setErrors({\n            'incorrect': false\n          });\n        }\n      });\n    }\n\n    ngOnInit() {} //deleteTask function\n\n\n    deleteTask(taskId) {\n      this.dialogData.header = 'Delete Record Dialog';\n      this.dialogData.content = 'Are you sure you want to delete this task?';\n      const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n        data: this.dialogData,\n        disableClose: true\n      }); //Functionality for after prompt is closed\n\n      dialogRef.afterClosed().subscribe({\n        next: result => {\n          console.log(result); //If the user confirms the deletion, delete the task\n\n          if (result === 'confirm') {\n            this.taskService.deleteTask(this.empId, taskId).subscribe({\n              next: res => {\n                this.employee = res;\n              },\n              error: e => {\n                console.log(e);\n              },\n              complete: () => {\n                this.todo = this.employee.todo;\n                this.done = this.employee.done;\n              }\n            });\n          }\n        }\n      });\n    } // dragDrop function\n\n\n    drop(event) {\n      if (event.previousContainer === event.container) {\n        moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n        console.log('Item reordered in the same column');\n        this.updateTaskList(this.empId, this.todo, this.done);\n      } else {\n        console.log('Item moved to the other column');\n        transferArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);\n        this.updateTaskList(this.empId, this.todo, this.done);\n      }\n    } //updateTask for drag/drop function\n\n\n    updateTaskList(empId, todo, done) {\n      this.taskService.updateTask(empId, todo, done).subscribe({\n        next: res => {\n          this.employee = res;\n        },\n        error: e => {\n          console.log(e);\n        },\n        complete: () => {\n          this.todo = this.employee.todo;\n          this.done = this.employee.done;\n        }\n      });\n    }\n\n  }\n\n  HomeComponent.ɵfac = function HomeComponent_Factory(t) {\n    return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.TaskService), i0.ɵɵdirectiveInject(i2.CookieService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.MatDialog));\n  };\n\n  HomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HomeComponent,\n    selectors: [[\"app-home\"]],\n    decls: 39,\n    vars: 15,\n    consts: [[\"fxLayout\", \"column\", 1, \"main-welcome\"], [\"fxFlex\", \"\"], [1, \"title\"], [1, \"subtitle\"], [\"fxLayout\", \"column\", 1, \"task-container\", \"mat-elevation-z4\"], [3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"fill\", 2, \"width\", \"100%\"], [\"type\", \"text\", \"matInput\", \"\", \"name\", \"task\", \"formControlName\", \"task\", \"placeholder\", \"Enter a task name...\"], [\"type\", \"submit\", \"mat-icon-button\", \"\", \"matSuffix\", \"\", 3, \"disabled\"], [\"color\", \"primary\", 2, \"width\", \"36px\", \"height\", \"36px\", \"font-size\", \"36px\"], [4, \"ngIf\"], [\"fxLayout\", \"row\", \"fxLayoutGap\", \"15px\", 1, \"task-container\", 2, \"margin-top\", \"20px\"], [1, \"mat-elevation-z0\"], [\"fxLayout\", \"column\", \"fxLayoutGap\", \"10px\", \"cdkDropList\", \"\", 1, \"task-column\", 3, \"cdkDropListData\", \"cdkDropListConnectedTo\", \"cdkDropListDropped\"], [\"todoList\", \"cdkDropList\"], [\"cdkDrag\", \"\", 4, \"ngFor\", \"ngForOf\"], [\"doneList\", \"cdkDropList\"], [\"cdkDrag\", \"\"], [1, \"mat-elevation-z0\", \"task-card\"], [\"fxLayout\", \"row\"], [\"fxLayoutAlign\", \"end\", 2, \"margin-top\", \"-7px\"], [\"mat-icon-button\", \"\", 3, \"click\"], [\"color\", \"warn\"]],\n    template: function HomeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\", 2)(3, \"strong\");\n        i0.ɵɵtext(4, \"Welcome to the Web 450 Nodebucket Project\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"br\");\n        i0.ɵɵelementStart(6, \"span\", 3);\n        i0.ɵɵtext(7, \" A to-do list for productive people \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(8, \"div\", 1)(9, \"div\", 4)(10, \"mat-card\")(11, \"form\", 5);\n        i0.ɵɵlistener(\"ngSubmit\", function HomeComponent_Template_form_ngSubmit_11_listener() {\n          ctx.createTask();\n          return ctx.taskForm.reset();\n        });\n        i0.ɵɵelementStart(12, \"mat-card-content\")(13, \"mat-form-field\", 6);\n        i0.ɵɵelement(14, \"input\", 7);\n        i0.ɵɵelementStart(15, \"button\", 8)(16, \"mat-icon\", 9);\n        i0.ɵɵtext(17, \"add_circle\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(18, HomeComponent_mat_error_18_Template, 2, 0, \"mat-error\", 10);\n        i0.ɵɵtemplate(19, HomeComponent_mat_error_19_Template, 2, 0, \"mat-error\", 10);\n        i0.ɵɵtemplate(20, HomeComponent_mat_error_20_Template, 2, 0, \"mat-error\", 10);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(21, \"div\", 1)(22, \"div\", 11)(23, \"div\", 1)(24, \"mat-card\", 12)(25, \"mat-card-title\");\n        i0.ɵɵtext(26, \"To Do\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"mat-card-content\")(28, \"div\", 13, 14);\n        i0.ɵɵlistener(\"cdkDropListDropped\", function HomeComponent_Template_div_cdkDropListDropped_28_listener($event) {\n          return ctx.drop($event);\n        });\n        i0.ɵɵtemplate(30, HomeComponent_div_30_Template, 10, 1, \"div\", 15);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(31, \"div\", 1)(32, \"mat-card\", 12)(33, \"mat-card-title\");\n        i0.ɵɵtext(34, \"Done\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"mat-card-content\")(36, \"div\", 13, 16);\n        i0.ɵɵlistener(\"cdkDropListDropped\", function HomeComponent_Template_div_cdkDropListDropped_36_listener($event) {\n          return ctx.drop($event);\n        });\n        i0.ɵɵtemplate(38, HomeComponent_div_38_Template, 9, 1, \"div\", 15);\n        i0.ɵɵelementEnd()()()()()()();\n      }\n\n      if (rf & 2) {\n        const _r3 = i0.ɵɵreference(29);\n\n        const _r5 = i0.ɵɵreference(37);\n\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"formGroup\", ctx.taskForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", !ctx.taskForm.valid);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.taskForm.controls[\"task\"].hasError(\"required\") && ctx.taskForm.controls[\"task\"].touched);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.taskForm.controls[\"task\"].hasError(\"minlength\") && ctx.taskForm.controls[\"task\"].touched);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.taskForm.controls[\"task\"].hasError(\"maxlength\") && ctx.taskForm.controls[\"task\"].touched);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"cdkDropListData\", ctx.todo)(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction1(11, _c0, _r5));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.todo);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"cdkDropListData\", ctx.done)(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction1(13, _c0, _r3));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.done);\n      }\n    },\n    dependencies: [i5.NgForOf, i5.NgIf, i6.DefaultLayoutDirective, i6.DefaultLayoutGapDirective, i6.DefaultLayoutAlignDirective, i6.DefaultFlexDirective, i7.MatButton, i8.MatIcon, i9.MatError, i9.MatFormField, i9.MatSuffix, i10.MatCard, i10.MatCardContent, i10.MatCardTitle, i11.MatInput, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i12.CdkDropList, i12.CdkDrag],\n    styles: [\".main-welcome[_ngcontent-%COMP%]{margin-top:30px}.title[_ngcontent-%COMP%]{text-align:center;font-weight:lighter;border-bottom:black;border-width:1px}.subtitle[_ngcontent-%COMP%]{text-align:center;font-size:14px}.task-container[_ngcontent-%COMP%]{width:50%;margin:0 auto}.task-column[_ngcontent-%COMP%]{border:1px solid gray;min-height:68px;background-color:#fff;border-radius:6px;overflow:hidden;display:block}.task-card[_ngcontent-%COMP%]{cursor:move;padding:20px 10px;border-bottom:2px solid gray;min-height:68px;height:68px;font-size:14px;box-sizing:border-box;justify-content:space-between;align-items:center}\"]\n  });\n  return HomeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}