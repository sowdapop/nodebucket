{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/services/task.service\";\nimport * as i2 from \"ngx-cookie-service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/flex-layout/flex\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/icon\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/card\";\nimport * as i10 from \"@angular/material/input\";\n\nfunction HomeComponent_mat_error_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Task is a required field. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction HomeComponent_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" The task field must be at least 3 characters in length. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction HomeComponent_mat_error_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" The task field cannot exceed 35 characters in length. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction HomeComponent_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"mat-card\", 15)(2, \"mat-card-content\")(3, \"div\", 16)(4, \"div\", 1);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()()()()();\n  }\n\n  if (rf & 2) {\n    const item_r5 = ctx.$implicit;\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", item_r5.text, \" \");\n  }\n}\n\nfunction HomeComponent_div_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"mat-card\", 15)(2, \"div\", 16)(3, \"div\", 1);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()()()();\n  }\n\n  if (rf & 2) {\n    const item_r6 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", item_r6.text, \" \");\n  }\n}\n\nexport let HomeComponent = /*#__PURE__*/(() => {\n  class HomeComponent {\n    //Functionality of task form\n    constructor(taskService, cookieService, fb) {\n      this.taskService = taskService;\n      this.cookieService = cookieService;\n      this.fb = fb; //Initialize form\n\n      this.taskForm = this.fb.group({\n        task: [null, Validators.compose([Validators.minLength(3), Validators.maxLength(35)])]\n      });\n      this.employee = {};\n      this.todo = [];\n      this.done = [];\n      this.empId = parseInt(this.cookieService.get('session.user'), 10); //Call all tasks with promise.\n\n      this.taskService.findAllTasks(this.empId).subscribe({\n        next: res => {\n          this.employee = res;\n          console.log('--Response from the findAllTasks service call.--');\n          console.log(this.employee);\n        },\n        error: e => {\n          console.log(e.message);\n        },\n        complete: () => {\n          this.todo = this.employee.todo;\n          this.done = this.employee.done;\n          console.log('onComplete method from the home.component.ts file, findAllTasks() service call');\n          console.log(this.todo);\n          console.log(this.done);\n        }\n      });\n    }\n\n    ngOnInit() {} //createTask function\n\n\n    createTask() {\n      const newTask = this.taskForm.controls['task'].value;\n      this.taskService.createTask(this.empId, newTask).subscribe({\n        next: res => {\n          this.employee = res;\n          console.log('--This is the response from the createTask call.');\n          console.log(res);\n        },\n        error: e => {\n          console.log(e.message);\n        },\n        complete: () => {\n          this.todo = this.employee.todo;\n          this.done = this.employee.done;\n          console.log('--onComplete method from the home.component.ts file, createTask() service call.');\n          console.log(this.todo);\n          console.log(this.done);\n          this.taskForm.controls['task'].setErrors({\n            'incorrect': false\n          });\n        }\n      });\n    }\n\n  }\n\n  HomeComponent.ɵfac = function HomeComponent_Factory(t) {\n    return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.TaskService), i0.ɵɵdirectiveInject(i2.CookieService), i0.ɵɵdirectiveInject(i3.FormBuilder));\n  };\n\n  HomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HomeComponent,\n    selectors: [[\"app-home\"]],\n    decls: 36,\n    vars: 7,\n    consts: [[\"fxLayout\", \"column\", 1, \"main-welcome\"], [\"fxFlex\", \"\"], [1, \"title\"], [1, \"subtitle\"], [\"fxLayout\", \"column\", 1, \"task-container\", \"mat-elevation-z4\"], [3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"fill\", 1, \"w-100\"], [\"type\", \"text\", \"matInput\", \"\", \"name\", \"task\", \"formControlName\", \"task\", \"placeholder\", \"Enter a task name...\"], [\"type\", \"submit\", \"mat-icon-button\", \"\", \"matSuffix\", \"\", 3, \"disabled\"], [\"color\", \"primary\", 2, \"width\", \"36px\", \"height\", \"36px\", \"font-size\", \"36px\"], [4, \"ngIf\"], [\"fxLayout\", \"row\", \"fxLayoutGap\", \"15px\", 1, \"task-container\", 2, \"margin-top\", \"20px\"], [1, \"mat-elevation-z0\"], [1, \"task-column\"], [4, \"ngFor\", \"ngForOf\"], [1, \"mat-elevation-z0\", \"task-card\"], [\"fxLayout\", \"row\"]],\n    template: function HomeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\", 2);\n        i0.ɵɵtext(3, \" Welcome to WEB 450's - nodebucket Project \");\n        i0.ɵɵelement(4, \"br\");\n        i0.ɵɵelementStart(5, \"span\", 3);\n        i0.ɵɵtext(6, \" A to-do list for productive people \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(7, \"div\", 1)(8, \"div\", 4)(9, \"mat-card\")(10, \"form\", 5);\n        i0.ɵɵlistener(\"ngSubmit\", function HomeComponent_Template_form_ngSubmit_10_listener() {\n          ctx.createTask();\n          return ctx.taskForm.reset();\n        });\n        i0.ɵɵelementStart(11, \"mat-card-content\")(12, \"mat-form-field\", 6);\n        i0.ɵɵelement(13, \"input\", 7);\n        i0.ɵɵelementStart(14, \"button\", 8)(15, \"mat-icon\", 9);\n        i0.ɵɵtext(16, \"add_circle\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(17, HomeComponent_mat_error_17_Template, 2, 0, \"mat-error\", 10);\n        i0.ɵɵtemplate(18, HomeComponent_mat_error_18_Template, 2, 0, \"mat-error\", 10);\n        i0.ɵɵtemplate(19, HomeComponent_mat_error_19_Template, 2, 0, \"mat-error\", 10);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(20, \"div\", 1)(21, \"div\", 11)(22, \"div\", 1)(23, \"mat-card\", 12)(24, \"mat-card-title\");\n        i0.ɵɵtext(25, \"To Do\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"mat-card-content\")(27, \"div\", 13);\n        i0.ɵɵtemplate(28, HomeComponent_div_28_Template, 6, 1, \"div\", 14);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(29, \"div\", 1)(30, \"mat-card\", 12)(31, \"mat-card-title\");\n        i0.ɵɵtext(32, \"Done\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"mat-card-content\")(34, \"div\", 13);\n        i0.ɵɵtemplate(35, HomeComponent_div_35_Template, 5, 1, \"div\", 14);\n        i0.ɵɵelementEnd()()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"formGroup\", ctx.taskForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", !ctx.taskForm.valid);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.taskForm.controls[\"task\"].hasError(\"required\") && ctx.taskForm.controls[\"task\"].touched);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.taskForm.controls[\"task\"].hasError(\"minlength\") && ctx.taskForm.controls[\"task\"].touched);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.taskForm.controls[\"task\"].hasError(\"maxlength\") && ctx.taskForm.controls[\"task\"].touched);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngForOf\", ctx.todo);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngForOf\", ctx.done);\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf, i5.DefaultLayoutDirective, i5.DefaultLayoutGapDirective, i5.DefaultFlexDirective, i6.MatButton, i7.MatIcon, i8.MatError, i8.MatFormField, i8.MatSuffix, i9.MatCard, i9.MatCardContent, i9.MatCardTitle, i10.MatInput, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n    styles: [\".main-welcome[_ngcontent-%COMP%]{margin-top:30px}.title[_ngcontent-%COMP%]{text-align:center;font-weight:lighter}.subtitle[_ngcontent-%COMP%]{text-align:center;font-size:14px}.task-container[_ngcontent-%COMP%]{width:35%;margin:0 auto}.task-column[_ngcontent-%COMP%]{border:2px solid gray;min-height:68px;background-color:#fff;border-radius:6px;overflow:hidden;display:block}.task-card[_ngcontent-%COMP%]{cursor:move;padding:20px 10px;border-bottom:2px solid gray;min-height:68px;height:68px;font-size:14px;box-sizing:border-box;justify-content:space-between;align-items:center}\"]\n  });\n  return HomeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}