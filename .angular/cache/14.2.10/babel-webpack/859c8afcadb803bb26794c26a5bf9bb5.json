{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-cookie-service\";\nimport * as i4 from \"@angular/common/http\";\nimport * as i5 from \"src/app/shared/services/employee.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/flex-layout/flex\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"primeng/messages\";\nimport * as i10 from \"@angular/material/form-field\";\nimport * as i11 from \"@angular/material/card\";\nimport * as i12 from \"@angular/material/input\";\n\nfunction LoginComponent_mat_error_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Employee ID is a required field. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_mat_error_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Employee ID must be a numerical value. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    //Establishes form services\n    constructor(fb, router, cookieService, http, employeeService) {\n      this.fb = fb;\n      this.router = router;\n      this.cookieService = cookieService;\n      this.http = http;\n      this.employeeService = employeeService; //Define error message & employee variables\n\n      this.errorMessages = []; //Login form requirements\n\n      this.loginForm = this.fb.group({\n        empId: [null, Validators.compose([Validators.required, Validators.pattern('^[0-9]*$')])]\n      });\n      this.employee = {};\n    }\n\n    ngOnInit() {} //Login function which validates the input from user\n\n\n    login() {\n      const empId = this.loginForm.controls['empId'].value;\n      this.employeeService.findEmployeeById(empId).subscribe({\n        next: res => {\n          if (res) {\n            this.employee = res;\n            this.cookieService.set('session_user', this.employee.empId.toString(), 1);\n            this.cookieService.set('session_name', `${this.employee.firstName} ${this.employee.lastName}`, 1);\n            this.router.navigate(['/']);\n          } else {\n            this.errorMessages = [{\n              severity: 'error',\n              summary: 'Error',\n              detail: 'Please enter a valid Employee ID to continue.'\n            }];\n          }\n        },\n        error: e => {\n          console.log(e);\n          this.errorMessages = [{\n            severity: 'error',\n            summary: 'Error',\n            detail: e.message\n          }];\n        }\n      });\n    }\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.CookieService), i0.ɵɵdirectiveInject(i4.HttpClient), i0.ɵɵdirectiveInject(i5.EmployeeService));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 19,\n    vars: 6,\n    consts: [[\"fxLayout\", \"column\", 1, \"login-container\"], [2, \"width\", \"50%\"], [3, \"value\", \"enableService\", \"valueChange\"], [\"fxLayout\", \"column\", \"fxLayoutGap\", \"10px\", 1, \"mat-elevation=z0\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mat-elevation-z0\"], [\"appearance\", \"fill\", 2, \"width\", \"100%\"], [\"type\", \"text\", \"matInput\", \"\", \"formControlName\", \"empId\", \"placeholder\", \"Employee ID\"], [4, \"ngIf\"], [\"type\", \"submit\", \"fxFlex\", \"\", \"mat-raised-button\", \"\", \"color\", \"primary\", 2, \"height\", \"50px\", \"font-size\", \"18px\", 3, \"disabled\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-card\", 1)(2, \"mat-card-header\")(3, \"mat-card-title\");\n        i0.ɵɵtext(4, \" Employee Sign-In Page \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"mat-card-subtitle\");\n        i0.ɵɵtext(6, \" You must enter a valid Employee ID to continue. \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"mat-card-content\")(8, \"p-messages\", 2);\n        i0.ɵɵlistener(\"valueChange\", function LoginComponent_Template_p_messages_valueChange_8_listener($event) {\n          return ctx.errorMessages = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"mat-card\", 3)(10, \"form\", 4);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_10_listener() {\n          ctx.login();\n          return ctx.loginForm.reset();\n        });\n        i0.ɵɵelementStart(11, \"mat-card-content\", 5)(12, \"mat-form-field\", 6);\n        i0.ɵɵelement(13, \"input\", 7);\n        i0.ɵɵtemplate(14, LoginComponent_mat_error_14_Template, 2, 0, \"mat-error\", 8);\n        i0.ɵɵtemplate(15, LoginComponent_mat_error_15_Template, 2, 0, \"mat-error\", 8);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"mat-card-actions\")(17, \"button\", 9);\n        i0.ɵɵtext(18, \"Log In\");\n        i0.ɵɵelementEnd()()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"value\", ctx.errorMessages)(\"enableService\", false);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls[\"empId\"].hasError(\"required\") && ctx.loginForm.controls[\"empId\"].touched);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls[\"empId\"].hasError(\"pattern\") && ctx.loginForm.controls[\"empId\"].touched);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", !ctx.loginForm.valid);\n      }\n    },\n    dependencies: [i6.NgIf, i7.DefaultLayoutDirective, i7.DefaultLayoutGapDirective, i7.DefaultFlexDirective, i8.MatButton, i9.Messages, i10.MatError, i10.MatFormField, i11.MatCard, i11.MatCardHeader, i11.MatCardContent, i11.MatCardTitle, i11.MatCardSubtitle, i11.MatCardActions, i12.MatInput, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\".login-container[_ngcontent-%COMP%]{width:75%;margin:10% auto;text-align:center;justify-content:center;align-items:center}\"]\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}